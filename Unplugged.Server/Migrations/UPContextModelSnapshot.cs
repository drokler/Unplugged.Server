// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unplugged.Server.Database;

namespace Unplugged.Server.Migrations
{
    [DbContext(typeof(UPContext))]
    partial class UPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("UnpluggedModel.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<string>("StreamUrl")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalFileUrls")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("PresentationId")
                        .HasColumnType("text");

                    b.Property<double>("TotalRateValue")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PresentationId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("UnpluggedModel.RateSpecies", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RateId")
                        .HasColumnType("text");

                    b.Property<double>("RateValue")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("RateSpecies");
                });

            modelBuilder.Entity("UnpluggedModel.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConnectInfo")
                        .HasColumnType("text");

                    b.Property<string>("Fio")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            ConnectInfo = "",
                            Fio = "Admin",
                            Login = "Admin",
                            Password = "QWEqwe123",
                            Role = 0
                        });
                });

            modelBuilder.Entity("UnpluggedModel.UserRegistration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Fio")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.HasOne("UnpluggedModel.Event", null)
                        .WithMany("Presentations")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.HasOne("UnpluggedModel.Presentation", null)
                        .WithMany("Rates")
                        .HasForeignKey("PresentationId");
                });

            modelBuilder.Entity("UnpluggedModel.RateSpecies", b =>
                {
                    b.HasOne("UnpluggedModel.Rate", null)
                        .WithMany("Species")
                        .HasForeignKey("RateId");
                });

            modelBuilder.Entity("UnpluggedModel.Event", b =>
                {
                    b.Navigation("Presentations");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.Navigation("Species");
                });
#pragma warning restore 612, 618
        }
    }
}
