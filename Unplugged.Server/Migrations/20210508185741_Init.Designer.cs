// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unplugged.Server.Database;

namespace Unplugged.Server.Migrations
{
    [DbContext(typeof(UPContext))]
    [Migration("20210508185741_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("UnpluggedModel.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("CoverData")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StreamUrl")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalFileUrls")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("EventId1")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("_EventId")
                        .HasColumnType("text")
                        .HasColumnName("EventId");

                    b.HasKey("Id");

                    b.HasIndex("EventId1");

                    b.HasIndex("UserId");

                    b.ToTable("Presentations");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000102",
                            AdditionalFileUrls = "tap-fileserver/d1",
                            Description = "Плюсы и минусы программирования на flutter",
                            Duration = 25,
                            Name = "Как я на флатере писал",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000202",
                            AdditionalFileUrls = "tap-fileserver/d2",
                            Description = "Минусов оказалось больше",
                            Duration = 35,
                            Name = "Как я покончил с флатером",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000103",
                            AdditionalFileUrls = "tap-fileserver/d3",
                            Description = "Пишем свою rougelike рпг. Как не попасть в петлю.",
                            Duration = 30,
                            Name = "Рогалики и сурки",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000203",
                            AdditionalFileUrls = "tap-fileserver/d4",
                            Description = "Или про то как я писал свою аркаду.",
                            Duration = 20,
                            Name = "Каждый может быть манагером",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000104",
                            AdditionalFileUrls = "tap-fileserver/d5",
                            Description = "Что лучше python или .net core",
                            Duration = 25,
                            Name = "Давим змею",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000204",
                            AdditionalFileUrls = "tap-fileserver/d6",
                            Description = "Реестр карьеров и возникшие там проблемы",
                            Duration = 40,
                            Name = "Щель в земле",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000105",
                            AdditionalFileUrls = "tap-fileserver/d7",
                            Description = "Или почему в Маяке все не очень",
                            Duration = 25,
                            Name = "Темно как в жо...",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000205",
                            AdditionalFileUrls = "tap-fileserver/d8",
                            Description = "лень было думать",
                            Duration = 35,
                            Name = "Рандомный доклад",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        });
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("PresentationId")
                        .HasColumnType("text");

                    b.Property<double>("TotalRateValue")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PresentationId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("UnpluggedModel.RateSpecies", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RateId")
                        .HasColumnType("text");

                    b.Property<double>("RateValue")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("RateSpecies");
                });

            modelBuilder.Entity("UnpluggedModel.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConnectInfo")
                        .HasColumnType("text");

                    b.Property<string>("Fio")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            ConnectInfo = "contact info",
                            Fio = "Admin",
                            Login = "Admin",
                            Password = "QWEqwe123",
                            Role = 0
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConnectInfo = "contact info",
                            Fio = "Moderator",
                            Login = "Moderator",
                            Password = "QWEqwe123",
                            Role = 1
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConnectInfo = "https://vk.com/mypag",
                            Fio = "Трембрвецкий Николай",
                            Login = "koperniki",
                            Password = "org100h",
                            Role = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConnectInfo = "contact info",
                            Fio = "Куркутов Павел",
                            Login = "kpavel",
                            Password = "QWEqwe123",
                            Role = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ConnectInfo = "contact info",
                            Fio = "Адаричев Вадим",
                            Login = "avadik",
                            Password = "QWEqwe123",
                            Role = 2
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ConnectInfo = "contact info",
                            Fio = "Библенко Артем",
                            Login = "bartem",
                            Password = "QWEqwe123",
                            Role = 2
                        });
                });

            modelBuilder.Entity("UnpluggedModel.UserRegistration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Fio")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.HasOne("UnpluggedModel.Event", null)
                        .WithMany("Presentations")
                        .HasForeignKey("EventId1");

                    b.HasOne("UnpluggedModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.HasOne("UnpluggedModel.Presentation", null)
                        .WithMany("Rates")
                        .HasForeignKey("PresentationId");
                });

            modelBuilder.Entity("UnpluggedModel.RateSpecies", b =>
                {
                    b.HasOne("UnpluggedModel.Rate", null)
                        .WithMany("Species")
                        .HasForeignKey("RateId");
                });

            modelBuilder.Entity("UnpluggedModel.Event", b =>
                {
                    b.Navigation("Presentations");
                });

            modelBuilder.Entity("UnpluggedModel.Presentation", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("UnpluggedModel.Rate", b =>
                {
                    b.Navigation("Species");
                });
#pragma warning restore 612, 618
        }
    }
}
